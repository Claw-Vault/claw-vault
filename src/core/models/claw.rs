//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "claw")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub data: String,
    pub md5hash: String,
    pub validity: ValidDuration,
    pub created_at: DateTime,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "i64", db_type = "BigInteger")]
pub enum ValidDuration {
    #[sea_orm(num_value = 60)]
    Minute = 60,
    #[sea_orm(num_value = 900)]
    QuarterHour = 900,
    #[sea_orm(num_value = 1800)]
    HalfHour = 1800,
}

impl ValidDuration {
    pub fn from_i64(v: i64) -> Self {
        match v {
            900 => Self::QuarterHour,
            1800 => Self::HalfHour,
            _ => Self::Minute,
        }
    }

    pub fn to_string(self) -> String {
        match self {
            ValidDuration::Minute => String::from("1 minute"),
            ValidDuration::QuarterHour => String::from("15 minutes"),
            ValidDuration::HalfHour => String::from("60 minutes"),
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::claw_keys::Entity")]
    ClawKeys,
}

impl Related<super::claw_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ClawKeys.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
